Day1 JAM
========

1. What is Version a Control System
2. Can i use Version control system to manage different types of documents and files.
3. Git is a _____________-
4. Git hub is a __________
5. Is git hub open source
6. What is open source
7. Where in Git hub can i see all the commits/push done
8. how to assign the git with other team members
9. What is a Repo or Repository
10. what is git init and why
11. Can i work with git with git init command 
if yes why
if no why
12. What actually happens when you execute git init
13. How to add your files to your staging area which command should i use
14. How to add your files from your staging area to local repo
15. How to add your files from local repo to remote repo.
16. What is the difference between
git add .
git add *
git add -A
17. How to add only two files from your folder to git hub repo
18. What is .gitignore and why
19. How to work with .gitignore give all the steps
20. Can i push a branch with no commit (yes/no)
21. what is an orphan branch
22. how to commit a orphan branch
23. How to create a branch and work in that branch
Give two different ways
24. how to delete a branch
25. Can i create multiple branches with a single command
26. Can i use git commit without -m "Message"
27. _________ command is used to show the modified status of an existing file and the file addition status of a new file, if any, that has to be committed.
28. git remote add origin “URL” explain in detailed
29. git push origin [branch name] explain
30. Suppose, we want to work on a file that is on a remote Github repository as another developer. How can we do that? and it should import the files of a project from the remote repository to our local system
31. Difference with git clone and git remote add origin URL
32. git branch [name-of-the-branch]
33. git branch -D [name-of-the-branch]
34. git checkout [name-of-the-new-branch]
35. Which command is used to examine the detailed log of every commit in our repository. this command, is used to view the log specific to the branch we are currently in. 
36. git log -3 What does are used
37. git log -–graph
38. git log -–graph –pretty=oneline
39. git stash
This command can be used when we want to save our work without staging or committing the code to our Git repository and want to switch between branches.
40. git stash -u
This command is used when we want to stash the untracked files.
41.git stash pop
This command is used when we are back on our branch and want to retrieve the code.
42. git revert [commit id]
The git revert command can be considered as an ‘undo’ command. 

(However, it does not work as the traditional ‘undo’ operation. It figures out how to invert the changes introduced by the commit and appends a new commit with the resulting inverse content.)

43. git diff
Usage: git diff [commit-id-of-version-x] [commit-id-of-version-y]
Diffing is a function that takes two input datasets and outputs the changes between them. The git diff command is a multi-use Git command which, when executed, runs a diff function on Git data sources. These data sources can be commits, branches, files, and more. The git diff command is often used along with the git status and git log commands to analyze the current state of our Git repository. We use git log to get the details of commit IDs.



Create a branch in the hub using the UI.
Note the differences between clone, fetch, pull.

